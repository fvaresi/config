// -*-Javascript-*-

/////////////////
// BASE CONFIG //
/////////////////

require("favicon");
require("gmail"); // enable shortcuts
require("twitter");

hint_digits="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
url_completion_use_history = true;

// Ask before closing the window
// add_hook("window_before_close_hook",
//          function () {
//              var w = get_recent_conkeror_window();
//              var result = (w == null) ||
//                  "y" == (yield w.minibuffer.read_single_character_option(
//                      $prompt = "Quit Conkeror? (y/n)",
//                      $options = ["y", "n"]));
//              yield co_return(result);
//          });

interactive("switch-to-other-buffer",
            "Switch to the previously open buffer",
            function (I) {
                var blist = I.window.buffers.buffer_list
                if (blist.length > 1)
                    switch_to_buffer(I.window, blist[1]);
            });
define_key(default_global_keymap, "M-o", "switch-to-other-buffer");

interactive("switch-to-other-buffer",
            "Switch to the previously open buffer",
            function (I) {
                var blist = I.window.buffers.buffer_list
                if (blist.length > 1)
                    switch_to_buffer(I.window, blist[1]);
            });

//////////////
// WEBJUMPS //
//////////////

// aces
define_webjump("aces", "http://jira.internetbrands.com/browse/ACES-%s")

// php
define_webjump("php", "http://www.php.net/%s");

// youtube
define_webjump("youtube", "http://www.youtube.com/results?search_query=%s&search=Search");

// shorter duckduckgo
define_webjump("d", "https://duckduckgo.com/?q=%s");

////////////////
// Instapaper //
////////////////
// Based on https://www.ceondo.com/ecte/2010/09/productivity-conkeror-instapaper-kindle/
// TODO: send password using conkeror keywords for basic auth
// TODO: refactor common code

interactive("instapaper", "Send the current page to InstaPaper.",
            function (I) {
                check_buffer(I.buffer, content_buffer);
                let username = encodeURIComponent('fvaresi@gmail.com'),
		    password = encodeURIComponent(
			yield I.minibuffer.read($prompt = "Password: ")
		    ),
		    posturl = 'https://www.instapaper.com/api/add?' +
		    'username=' + username + '&' +
		    'password=' + password + '&url=' +
                    encodeURIComponent(I.window.content.location.href)
                '&selection=' +
                    encodeURIComponent(
                        yield I.minibuffer.read(
                            $prompt = "Description (optional): "));
                try {
		    var content = yield send_http_request(load_spec({uri: posturl}));
		    if (content.status == "201") {
			I.window.minibuffer.message("InstaPaper ok!");
		    } else {
			I.window.minibuffer.message("Error.");
		    }
                } catch (e) { 
                    I.window.minibuffer.message("Error.");
		}
            });

interactive("instapaper-link", "Send the current link to InstaPaper.",
            function (I) {
		bo = yield read_browser_object(I) ;
		mylink = load_spec_uri_string(load_spec(encodeURIComponent(bo)));
		check_buffer(I.buffer, content_buffer);
		let username = encodeURIComponent('fvaresi@gmail.com'),
		    password = encodeURIComponent(
			yield I.minibuffer.read($prompt = "Password: ")
		    ),
		    posturl = 'https://www.instapaper.com/api/add?' +
                    'username=' + username + '&' +
                    'password=' + password + '&url=' + mylink +
                    '&title=' + encodeURIComponent(
                        yield I.minibuffer.read(
                            $prompt = "Title (optional): ",
			    $initial_value = bo.textContent)) +
                    '&selection=' + encodeURIComponent(
                        yield I.minibuffer.read(
                            $prompt = "Description (optional): ",
			    $initial_value = "From: "+ I.buffer.title +" ("+I.window.content.location.href+")"
			));
                try {
		    var content = yield send_http_request(load_spec({uri: posturl}));
		    if (content.status == "201") {
			I.window.minibuffer.message("InstaPaper ok!");
		    } else {
			I.window.minibuffer.message("Error.");
		    }
                } catch (e) { 
                    I.window.minibuffer.message("Error.");
		}
            }, $browser_object = browser_object_links);

define_key(default_global_keymap, "C-x i", "instapaper");
define_key(default_global_keymap, "C-x I", "instapaper-link");

/////////////////////
// Google Calendar //
/////////////////////
require("user-agent-policy");

// Tell Google Calendar that we are Firefox not Conkeror:
user_agent_policy.define_policy(
    "GCal",
    user_agent_firefox(),
    build_url_regexp($domain = /(.*\.)?google/, $path = /calendar/)
);

//////////////////
// Org Protocol //
//////////////////
function org_store_link (url, title, window) {
    var cmd_str = 'emacsclient \"org-protocol://store-link?url='+url+'&title='+title+'\"';
    if (window != null) {
        window.minibuffer.message('Issuing ' + cmd_str);
    }
    shell_command_blind(cmd_str);
}

interactive("org-store-link", "Stores [[url][title]] as org link and copies url to emacs kill ring",
            function (I) {
                org_store_link(encodeURIComponent(I.buffer.display_uri_string), encodeURIComponent(I.buffer.document.title), I.window);
            });

function org_capture (url, title, selection, window) {
    var cmd_str = 'emacs-capture \"org-protocol://capture://b//'+url+'/'+title+'/'+selection+'\"';
    if (window != null) {
        window.minibuffer.message('Issuing ' + cmd_str);
    }
    shell_command_blind(cmd_str);
}

interactive("org-capture", "Clip url, title, and selection to capture via org-protocol",
            function (I) {
                org_capture(encodeURIComponent(I.buffer.display_uri_string), encodeURIComponent(I.buffer.document.title), encodeURIComponent(I.buffer.top_frame.getSelection()), I.window);
            });

define_key(content_buffer_normal_keymap, "C-c c", "org-capture");
define_key(content_buffer_normal_keymap, "C-c l", "org-store-link");


