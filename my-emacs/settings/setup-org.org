#+PROPERTY: header-args :exports code
#+PROPERTY: header-args :results output silent

#+EXPORT_EXCLUDE_TAGS: noexport crypt

* Org Mode
  :PROPERTIES:
  :VISIBILITY: children
  :END:

This one of my favorite modes, since it can accomplish lots of stuff like handling TODO lists, tracking time, keeping an agenda, and much more.
** General Settings

   This makes headings look prettier.

   #+BEGIN_SRC emacs-lisp
   (require 'org-bullets)
   #+END_SRC

   Enable collapsing of headings in most parts.

   #+BEGIN_SRC emacs-lisp
   (setq org-cycle-emulate-tab 'whitestart)
   #+END_SRC

   Some path and files...

   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/org")
     (setq org-mobile-directory "~/Dropbox/org-mobile")
     (setq org-default-notes-file (concat org-directory "/notes.org"))
     (setq default-journal-file (concat org-directory "/journal.org"))
   #+END_SRC

   # Enable declaring tasks inline. These behave as a regular heading except for visibility cycling.

   # #+BEGIN_SRC emacs-lisp
   # (require 'org-inlinetask)
   # #+END_SRC

   Enable exporting org files to confluence.

   #+BEGIN_SRC emacs-lisp
   (require 'ox-confluence)
   #+END_SRC

   Some configuration for logging.

   #+BEGIN_SRC emacs-lisp
     (setq org-log-into-drawer "LOGBOOK")
     (setq org-log-state-notes-insert-after-drawers t) ; currently this isn't used since we are using a drawer
   #+END_SRC

   Code to run when orgmode is loaded.

   #+BEGIN_SRC emacs-lisp
     (defun fvaresi/setup-org ()
       (org-bullets-mode 1)
       (visual-line-mode))
     (add-hook 'org-mode-hook 'fvaresi/setup-org)
   #+END_SRC

   Add some templates

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-structure-template-alist '("u" "#+BEGIN_COMMENT\n?\n#+END_COMMENT"))
   #+END_SRC


** Org Agenda

*** Sources							      :crypt:
-----BEGIN PGP MESSAGE-----

hQIMA2nLYyNk+9h4AQ/+LXJ/G+ELEl74YAFnjJBFfWM9e7oXlyklsedQX2VzrzVb
8xHyqXIxx3nn9Urm5nNf1xZNTFSaVLkO8R3h0c5rIvs1/KZMxXELL7WBYj0dUXbx
SeDHIANuZzIxOYJhOwIGNSf5x4T2Y9jwbS3Upxk6QlL+3ac+6zDYGrmGo2k0EPBY
ZMfZle0uMM256i3VkU2AN56v8BDJ637/9UqhviWceHNyHxSNQdas9rqt3chMvb8q
evqk5ANRfh664Y+1URaIKXjPR1iL3TPMMRD7ghdh37x+uh2ESaG3r1ITOo4G0BMK
4NUNER3tBmLBD8eP6NTsy8YjlbZXAogXLcWJSdUcNWHBo+c5euywh7zIS1/0KnaF
cwXjvPU1Tpifei0vgZYyNfZynbwzwGlIEPjAi3ND4YftiOIPsmZB2L/IfyfqPE81
NEqV/PItIMGnZXxGFry7TAT0/acBzJfIp/qUw35/ihH9yv8MCORufGnJrFx7fdRW
jTAZmwSwhhhI++2u3sgO/hmhIaxtE9fTvlOusQ9NsqM4uaoEeKRgBY1u15/l/0uJ
XHEqGatPR7fBbXddz5xb+xytQZb33/VcXvJwRZ/SKeg5iaeFT/9IgqW8YNwvpPaw
s1HujcaS7TRAdvPv4ysY8pjGEweKnDolbm2U/03Pci34NdNaB3tj6jDkG0RX4hTS
wQEBooXpXelwaDtdXI0EJcKPkMa6izFzh7RbtWuyvyNlKiJvoKW02gRr4BqK0YQZ
RoQ2kYHcLsClo5DQfMMqQj6WFui2hdhorInRCxLcWTTFTe1v+qg/OTKdCcAFl1M5
nZbINlbSC7TmRe+VVcYcn4r6a87OW20kKuN2wuNK0ISXGDo+kyZpdwjHQ+N0SFyY
R8HY1xVGPFsg4DPVcCLw+GjesokLhBd+dQIt8RZ4UkW2X7AS80WDCEAevjeUBDRj
BQDXub+SBqbFAFkgCk9ltBFTVeySKgn2VKatol8eWRWIdf+4QPWm6sGR9ojCp8iE
5gofJq00jWozjK6QcCfTfyYCUldkBBuAZbN9tcv1kowhTuNmwnCHvXQ5E7ZsXg5O
GZO/8hq2EYFNKhvf/I4XTMEYFTBZJ+iNct5acS2rEK9l/S+Fe5GGevBxc/BCw6hI
bUBTXJZxQIHlLaxqZlaYvMbxg2K/Zjj5dd79Ixn6FBi2KWjLw5bctUjhrqtVGFDq
JwZtgx4a9PLT8IdsSDQhVKri5mMFD+lZgZnI+nL9auLKbsNIWmkUhFS6SPORm5Sg
y8zmY7N0YSZH1pstWEhzjokZ+w==
=V3SD
-----END PGP MESSAGE-----

*** General Settings
    Use appt for org-agenda items.

    #+BEGIN_SRC emacs-lisp
      ;; (org-agenda-to-appt t)
    #+END_SRC

    Do not show diary entries in org-agenda.

    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-include-diary nil)
    #+END_SRC

    Do not show subtasks.

    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-todo-list-sublevels nil)
    #+END_SRC

    Add key binding...

    #+BEGIN_SRC emacs-lisp
      (define-key global-map "\C-ca" 'org-agenda)
    #+END_SRC

    ... and remove annoying ones

    #+BEGIN_SRC emacs-lisp
      (define-key org-mode-map (kbd "C-,") nil)
    #+END_SRC
** Org Babel

   This library is very useful for literate programming. Excellent examples of this are the [[http://www.howardism.org/Technical/Emacs/literate-devops.html][blog post]] and the [[https://youtu.be/dljNabciEGg][screencast]] by Howard Abrams.

   First load desired languages.

   #+BEGIN_SRC emacs-lisp
     (require 'ob-http)
     (require 'ob-shell)
     (require 'ob-sql)
     (setq org-babel-load-languages '((emacs-lisp . t)
                                      (http . t)
                                      (sql . t)))
   #+END_SRC

   Don't ask for confirmation before evaluating and don't do it automatically while exporting.

   #+BEGIN_SRC emacs-lisp
     (setq org-confirm-babel-evaluate nil)
     (setq org-export-babel-evaluate nil)
   #+END_SRC

   It's possible to define default headers per-language/buffer if required.

   #+BEGIN_SRC emacs-lisp
     (setq org-babel-default-header-args
           (cons '(:exports . "none")
                 (assq-delete-all :exports org-babel-default-header-args)))
   #+END_SRC

   There's this practical function from this [[http://pragmaticemacs.com/emacs/wrap-text-in-an-org-mode-block/][blog post]] that wraps selected code in text blocks. There are some interesting improvements suggested in the comments (e.g. using org-structure-template-alist for choices).

#+BEGIN_COMMENT   
Have org-begin-template use org-structure-template-alist for choices
Add behavior for when no region is selected
#+END_COMMENT   

   #+BEGIN_SRC emacs-lisp
     (defun fvaresi/org-begin-template ()
       "Make a template at point."
       (interactive)
       (if (org-at-table-p)
           (call-interactively 'org-table-rotate-recalc-marks)
         (let* ((choices '(("s" . "SRC")
                           ("e" . "EXAMPLE")
                           ("q" . "QUOTE")
                           ("v" . "VERSE")
                           ("c" . "CENTER")
                           ("l" . "LaTeX")
                           ("h" . "HTML")
                           ("a" . "ASCII")))
                (key
                 (key-description
                  (vector
                   (read-key
                    (concat (propertize "Template type: " 'face 'minibuffer-prompt)
                            (mapconcat (lambda (choice)
                                         (concat (propertize (car choice) 'face 'font-lock-type-face)
                                                 ": "
                                                 (cdr choice)))
                                       choices
                                       ", ")))))))
           (let ((result (assoc key choices)))
             (when result
               (let ((choice (cdr result)))
                 (cond
                  ((region-active-p)
                   (let ((start (region-beginning))
                         (end (region-end)))
                     (goto-char end)
                     (insert "#+END_" choice "\n")
                     (goto-char start)
                     (insert "#+BEGIN_" choice "\n")))
                  (t
                   (insert "#+BEGIN_" choice "\n")
                   (save-excursion (insert "#+END_" choice))))))))))
   #+END_SRC

** Org Capture

   #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
            `(("t" "Todo" entry
               (file+headline org-default-notes-file "Tasks")
               "* TODO %?"
               :kill-buffer t)

              ("b" "Bookmark" entry
               (file+headline org-default-notes-file "Bookmarks")
               "* %c\n:CREATED: %U\n:END:\n\n"
               :empty-lines 1)

              ("e" "Event" entry
               (file+datetree+prompt ,default-journal-file)
               "* %^T - %?"
               :kill-buffer t)
              ))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (setq org-refile-targets `((org-agenda-files :maxlevel . 3)))
     (setq org-refile-use-outline-path t)
     (setq org-outline-path-complete-in-steps nil)
     (setq org-refile-allow-creating-parent-nodes 'confirm)  
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp
     (define-key global-map "\C-cl" 'org-store-link)
     (define-key global-map "\C-cc" 'org-capture)
   #+END_SRC

** Org Clock
   This setup was built based on [[http://doc.norang.ca/org-mode.html#Clocking][configuration of Bernt Hansen]].

   #+BEGIN_SRC emacs-lisp
     ;; Resume clocking task when emacs is restarted.
     (org-clock-persistence-insinuate)

     ;; Resume clocking task on clock-in if the clock is open
     (setq org-clock-in-resume t)

     ;; Change tasks to NEXT when clocking in (this could be a function of the current state)
     (setq org-clock-in-switch-to-state "IN_PROGRESS")

     ;; Separate drawers for clocking and logs
     (setq org-drawers '("PROPERTIES" "LOGBOOK"))

     ;; Save clock data and state changes and notes in the LOGBOOK drawer
     (setq org-clock-into-drawer t)

     ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
     (setq org-clock-out-remove-zero-time-clocks t)

     ;; Clock out when moving task to a done state
     (setq org-clock-out-when-done t)

     ;; Save the running clock and all clock history when exiting Emacs, load it on startup
     (setq org-clock-persist t)

     ;; Do not prompt to resume an active clock
     (setq org-clock-persist-query-resume nil)

     ;; Enable auto clock resolution for finding open clocks
     (setq org-clock-auto-clock-resolution 'when-no-clock-is-running)

     ;; Include current clocking task in clock reports
     (setq org-clock-report-include-clocking-task t)

     (defun bh/punch-in (arg)
       "Start continuous clocking and set the default task to the
     selected task.  If no task is selected set the Organization task
     as the default task."
       (interactive "p")
       (setq bh/keep-clock-running t)
       (if (equal major-mode 'org-agenda-mode)
   	;;
   	;; We're in the agenda
   	;;
   	(let* ((marker (org-get-at-bol 'org-hd-marker))
                  (tags (org-with-point-at marker (org-get-tags-at))))
             (when tags
                 (org-agenda-clock-in '(16))))
         ;;
         ;; We are not in the agenda
         ;;
         (save-restriction
   	(widen)
   	;; Find the tags on the current task
   	(when (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)))
               (org-clock-in '(16))))))

     (global-set-key (kbd "<f9> I") 'bh/punch-in)

     (defun bh/punch-out ()
       (interactive)
       (setq bh/keep-clock-running nil)
       (when (org-clock-is-active)
         (org-clock-out))
       (org-agenda-remove-restriction-lock))

     (global-set-key (kbd "<f9> O") 'bh/punch-out)

     (defun bh/clock-in-default-task ()
       (save-excursion
         (org-with-point-at org-clock-default-task
   	(org-clock-in))))

     (defun bh/clock-in-parent-task ()
       "Move point to the parent (project) task if any and clock in"
       (let ((parent-task))
         (save-excursion
   	(save-restriction
             (widen)
             (while (and (not parent-task) (org-up-heading-safe))
               (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
                 (setq parent-task (point))))
             (if parent-task
                 (org-with-point-at parent-task
   		(org-clock-in))
               (when bh/keep-clock-running
                 (bh/clock-in-default-task)))))))

     (defun bh/clock-out-maybe ()
       (when (and (bound-and-true-p bh/keep-clock-running)
                  (not org-clock-clocking-in)
                  (marker-buffer org-clock-default-task)
                  (not org-clock-resolving-clocks-due-to-idleness))
         (bh/clock-in-parent-task)))

     (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)
   #+END_SRC

   Display time only for today in modeline.

   #+BEGIN_SRC emacs-lisp
     (setq org-clock-modeline-total 'today)
   #+END_SRC

** Org Crypt

   I'm using org-crypt to encrypt sensitive information in my config files that I don't want to be public in github.

   Since I'm using org files for emacs configuration, I need to decrypt these entries while tangling, so org-crypt is configured in the [[file:~/config/my-emacs/init.el][init file]].

** Org Download

   #+BEGIN_SRC emacs-lisp
     (require 'org-download)

     (setq org-download-screenshot-method "xfce4-screenshooter --region --save %s")
   #+END_SRC
   
** Org Export
   Don't add the html validation link when exporting.

   #+BEGIN_SRC emacs-lisp
   (setq org-html-validation-link nil)
   #+END_SRC

   Do not export headlines with tag noexport or crypt

   #+BEGIN_SRC emacs-lisp
     (setq org-export-exclude-tags '("noexport" "crypt"))
   #+END_SRC

** Org Jira
   
   [[https://github.com/baohaojun/org-jira][Org-jira]] is useful library for manipulating JIRA tickets in org-mode. It's not updated since 2011 and it is using the [[https://github.com/baohaojun/org-jira/issues/9][deprecated xml-rpc API]] but still works.

   #+BEGIN_SRC emacs-lisp
     (require 'org-jira)
     ;;(setq org-jira-serv-alist `(("Autocomm" (:url "http://jira.internetbrands.com/rpc/soap/jirasoapservice-v2?wsdl" :user "fvaresi" :host "http://jira.internetbrands.com"))))
     (setq jiralib-url "http://jira.internetbrands.com")
     (setq org-jira-use-status-as-todo t)
  #+END_SRC

   Added this functions to create links for scrum daily updates

   #+BEGIN_SRC emacs-lisp
     (defun org-jira-link-current-issue ()
       "Create link to JIRA issue and store it"
       (interactive)
       (let* ((org-jira-id (org-jira-get-issue-val-from-org "key"))
              (summary (org-jira-get-issue-val-from-org 'summary))
              (link (format "jira:%s" org-jira-id))
              (desc (format "%s: %s" org-jira-id summary)))
         (setq org-stored-links (cons (list link desc) org-stored-links))))

     (define-key org-jira-entry-mode-map (kbd "C-c i l") 'org-jira-link-current-issue)
   #+END_SRC

** Org Mime

   Use org-mime as [[https://github.com/howardabrams/dot-files/blob/master/emacs-mail.org#sending-email][suggested]] by Howard Abrams for sending org content via email.

   #+BEGIN_SRC emacs-lisp
     (require 'org-mime)
   #+END_SRC
   
** Org Mobile

   These files will be exported to [[https://github.com/matburt/mobileorg-android][MobileOrg]].

   #+BEGIN_SRC emacs-lisp
     (setq org-mobile-files `(,org-default-notes-file
            		  ,default-journal-file
   			  "~/Documents/comidas.org"
            		  ;; "~/org/cumple.org"
            		  ;; "~/autocomm/docs/sprints.org"
            		  ;; "~/life/docs/life.org"
            		  ;; "~/infuy/docs/infuy.org"
            		  ))
   #+END_SRC

   Captures from MobileOrg are stored here.

   #+BEGIN_SRC emacs-lisp
   (setq org-mobile-inbox-for-pull "~/org/from-mobile.org")
   #+END_SRC

   The following code provides [[https://github.com/matburt/mobileorg-android/wiki/FAQ#How_do_I_get_orgmode_to_execute_orgmobilepush_automatically][autopush]].

   #+BEGIN_SRC emacs-lisp
     (defvar fvaresi/org-mobile-push-timer nil
       "Timer that `fvaresi/org-mobile-push-timer' used to reschedule itself, or nil.")

     (defun org-mobile-push-with-delay (secs)
       (when fvaresi/org-mobile-push-timer
         (cancel-timer fvaresi/org-mobile-push-timer))
       (setq fvaresi/org-mobile-push-timer
             (run-with-idle-timer
              (* 1 secs) nil 'org-mobile-push)))

     (defun fvaresi/org-mobile-autopush ()
       (when (eq major-mode 'org-mode)
         (dolist (file (org-mobile-files-alist))
           (if (string= (file-truename (expand-file-name (car file)))
                        (file-truename (buffer-file-name)))
               (org-mobile-push-with-delay 30)))))

     (add-hook 'after-save-hook 'fvaresi/org-mobile-autopush)
   #+END_SRC

** Org Notify							   :noexport:

   The package [[https://github.com/p-m/org-notify][org-notify]] enables to set different types of notifications.

   #+BEGIN_SRC emacs-lisp
     (if (and (fboundp 'server-running-p) 
              (not (server-running-p)))
         (progn
        (require 'org-notify)

        (org-notify-add 'meeting
            	       '(:time "-1s" :period "20s" :duration 10 :actions (-message -ding))
            	       '(:time "15m" :period "5m" :duration 100 :actions (-notify/window)))

        (org-notify-add 'payment
            	       '(:time "15m" :period "5m" :duration 100 :actions (-notify/window)))

        (org-notify-start)))


   #+END_SRC
** Org Notmuch
   
   #+BEGIN_SRC emacs-lisp
     (require 'org-notmuch)
   #+END_SRC

** Org Protocol

   I use [[http://orgmode.org/worg/org-contrib/org-protocol.html][org-protocol]] to provide an interface for the web browser to store links and for the emacs client to capture notes on the fly.
   
   This [[http://cestdiego.github.io/blog/2015/08/19/org-protocol/][blog post]] provides useful information for this.

   #+BEGIN_SRC emacs-lisp
     (require 'org-protocol)
     (defadvice org-capture
         (after make-full-window-frame activate)
       "Advise capture to be the only window when used as a popup"
       (if (equal "emacs-capture" (frame-parameter nil 'name))
           (delete-other-windows)))

     (defadvice org-capture-finalize
         (after delete-capture-frame activate)
       "Advise capture-finalize to close the frame"
       (if (equal "emacs-capture" (frame-parameter nil 'name))
           (delete-frame)))
   #+END_SRC

** Org Todo
   Custom keywords.

   #+BEGIN_COMMENT
   Need to add link to todo-keywords syntax.
   #+END_COMMENT

   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords
   	`((sequence "TODO(t)" "IN_PROGRESS(i)" "|" "DONE(d)")
   	  (sequence "TODO(t)" "|" "ACCEPTED(a)" "REJECTED(r)")))
   #+END_SRC

  Don't allow to complete a task if there are pending subtasks.

  #+BEGIN_SRC emacs-lisp
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)  
  #+END_SRC

  =M-S-down= and =M-S-up= do not behave as documented, so I added these hooks to have the desired behavior.

  #+BEGIN_SRC emacs-lisp
    (defun fvaresi/org-shiftmetadown-move ()
      (cond
       ((org-at-heading-p) (org-move-subtree-down))
       ((org-at-item-bullet-p) (org-move-item-down))))
    (add-hook 'org-shiftmetadown-hook 'fvaresi/org-shiftmetadown-move)

    (defun fvaresi/org-shiftmetaup-move ()
      (cond
       ((org-at-heading-p) (org-move-subtree-up))
       ((org-at-item-bullet-p) (org-move-item-up))))
    (add-hook 'org-shiftmetaup-hook 'fvaresi/org-shiftmetaup-move)
  #+END_SRC

** Special functions						   :noexport:
   This functions are used by yasnippet to provide values for start/end of sprints.

   #+BEGIN_SRC emacs-lisp
     (defun fvaresi/sprint-start-values ()
       (let* ((current (current-time))
              (current-dow (nth 6 (decode-time current)))
              (day-shift (- 6 current-dow))
              (prev-saturday (time-add current (days-to-time (- day-shift 7))))
              (next-saturday (time-add current (days-to-time day-shift)))
              (date-format "%Y-%m-%d"))

         (list (format-time-string date-format prev-saturday)
               (format-time-string date-format next-saturday))))

     (defun fvaresi/sprint-end-values ()
       (let* ((current (current-time))
              (current-dow (nth 6 (decode-time current)))
              (day-shift (- 6 current-dow))
              (first-saturday (time-add current (days-to-time day-shift)))
              (second-saturday (time-add current (days-to-time (+ 7 day-shift))))
              (third-saturday (time-add current (days-to-time (+ 14 day-shift))))
              (date-format "%Y-%m-%d"))

         (list (format-time-string date-format first-saturday)
               (format-time-string date-format second-saturday)
               (format-time-string date-format third-saturday))))
   #+END_SRC
