#+PROPERTY: header-args :exports code
#+PROPERTY: header-args :results output silent

#+EXPORT_EXCLUDE_TAGS: noexport crypt

* Private							      :crypt:
-----BEGIN PGP MESSAGE-----

hQIMA2nLYyNk+9h4ARAAmHJBZLhDLdUiPLr4HukSx7jw0jFVYOrJOyJa/IXsBAb6
XNuaxUekDHa6LZ3rXaVVbd4Y8+T+KQCUDVU4rqM4qqBrc3hyrhxiXDSBMO1Ox5q2
3QF08LLfAJu1fZEr6RDsJ+dXw3p3SOYay1BzKsBA9C2plpzH02YMvb+t7e0E/kyW
0jqGzRTDvlJqisbCKC4KdtbBku0K2VAjy6dYq+KfLMEFAlfJxZIT7qi+jrTZl56C
J/PZol5Gyya1zL+OivmyV59S9k57dqDszi9KRj98GGV2Wm05DMTxxTX8wVkJmapI
uL9R75oBkInzXZ+SAO/ddWBb/QhQ3sDbKraRsw3C0AbbBNMDsb/sfywrjcP8ZmKX
L3PJNzS8C1oIx1HYOENByWm9+dXiwJoo82oCr8JsN4mD5VD94191N1kuh6Qt/jIS
FGcnQtmg3fzhqFh91sjvHUm6HjZeRoVQWawLsl4xr4I3cyJubmf2ZGK7c2eVRfeG
N3OycouUKfsmZ6IvcUOyv2O5MCDE8EKGyDhlNlv8oI+kxawd17qvSdb9CPDXImWL
ahNkkw84CgG8WiekZkirzaM2j/tkj2sQD4uoSa0XaasxuMMN82ELhKK6xARXh09L
Aoqp9a2bP7MtXFPQ9Oqgyq49Iq8Dwqb3NrTxpxPDLe6tRcHZztQ4m/i+z9MqNUrS
pwEWzIQZmRixW9youj2b1sXT/sUZ6/vz+9cvufaUcW3D3fa2sXBcTJsyU5uB5KgE
CI/8hXk8t/jfL32iStwkDs3y77iQREKLnROOOjE5X+ic7KAqnfiTB6nsHhbOTrAg
1gK+JF3Ixtr9D7OwtOvHsEMYoSakWDi+bCvOuWvoUa0OCYEJLtzbBFylesCeszvh
NP2vkAUnecRy86iOzFmDmo9fSvTXdSav
=+D+9
-----END PGP MESSAGE-----
* Emacs packages

  It seems marmalade repo is not required anymore for most packages, so I stick with melpa. Also added org repo to install org-plus-contrib.

  #+BEGIN_SRC emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  #+END_SRC

  One problem of melpa repository is that it receives updates as soon as their published, so it's up to the maintainer to keep the package stable. The upside of this is that bugs are detected and fixed early. The downside is that you may have unexpected bugs.

  AFAIK, the only way to avoid this is to use [[http://stable.melpa.org][melpa stable]]. You can then pin some packages to this repo like this:

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)

    ;; (add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
    ;; (add-to-list 'package-pinned-packages '(clj-refactor . "melpa-stable") t)
  #+END_SRC

  I keep a list of the packages I've installed so that a fresh install requires just to eval =gimme-my-packages=. Make sure you re-eval it after adding a package.

  #+BEGIN_SRC emacs-lisp
    (package-initialize)

    (defun gimme-my-packages ()
      (interactive)

      ;; consider using package-selected-packages
      (let ((required-packages '(ace-isearch
                                 ace-jump-mode

                                 android-mode

                                 browse-kill-ring

                                 company
                                 company-tern

                                 conkeror-minor-mode

                                 clojure-mode
                                 clojure-snippets
                                 clojurescript-mode
                                 clj-refactor
                                 cider
                                 slamhound
                                 4clojure

                                 company-emoji

                                 diff-hl

                                 easy-kill
                                 easy-kill-extras

                                 emmet-mode

                                 evil

                                 expand-region

                                 flycheck

                                 geben

                                 geiser

                                 ggtags

                                 gh-md

                                 gnus-alias

                                 guide-key

                                 hydra

                                 helm
                                 helm-ag
                                 helm-swoop
                                 helm-projectile

                                 interleave

                                 json-mode

                                 js2-mode
                                 js2-refactor
                                 xref-js2
                                 indium

                                 ledger-mode

                                 magit
                                 magit-svn
                                 orgit

                                 multiple-cursors

                                 neotree

                                 notmuch

                                 org-plus-contrib
                                 org-bullets
                                 org-mime
                                 org-download
                                 ob-http
                                 org-gcal
                                 org-jira
                                 org-beautify-theme
                                 htmlize
                                 ox-reveal
                                 orgtbl-aggregate
                                 google-contacts

                                 org-pomodoro

                                 paradox

                                 paredit

                                 php-mode
                                 php-auto-yasnippets
                                 php-refactor-mode

                                 popwin

                                 projectile

                                 rainbow-delimiters

                                 restclient

                                 color-theme-sanityinc-tomorrow

                                 smart-mode-line
                                 smart-mode-line-powerline-theme

                                 smartparens

                                 smooth-scrolling

                                 solarized-theme

                                 string-edit
                                 string-inflection

                                 twittering-mode

                                 undo-tree

                                 web-beautify

                                 web-mode

                                 window-number
                                 )))

        (dolist (p required-packages)
          (when (not (package-installed-p p))
            (package-install p)))))
  #+END_SRC

  [[https://github.com/Malabarba/paradox/][Paradox]] is a great interface for package managing.

  #+BEGIN_SRC emacs-lisp
    (setq paradox-automatically-star t)
    (setq paradox-execute-asynchronously nil)
  #+END_SRC

  Just to be safe, backup current elpa dir when upgrading

  #+BEGIN_SRC emacs-lisp
    (defun fvaresi/upgrade-with-bkp ()
      (interactive)

      (let* ((src (expand-file-name "elpa" user-emacs-directory))
             (bkp-name (concat "elpa.bkp." (format-time-string "%Y%m%d")))
             (dest (expand-file-name bkp-name user-emacs-directory)))
        (progn (copy-directory src dest)
               (paradox-upgrade-packages))))
  #+END_SRC

