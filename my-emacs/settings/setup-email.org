#+PROPERTY: header-args :exports code
#+PROPERTY: header-args :results output silent

#+EXPORT_EXCLUDE_TAGS: noexport crypt

* Email
  :PROPERTIES:
  :VISIBILITY: children
  :END:
** Identity							      :crypt:
-----BEGIN PGP MESSAGE-----

hQIMA2nLYyNk+9h4AQ//SWcbezpQIbwMExwPThDxHvtoOrpCdvFRSsRmR25eLBe9
fzreaXdRl1j6zTM/r8VYJ5HsP4kUENDM3N4PK1ejPAXvTOCevCRewFLco/Y3iYXK
bzOO2TpKQwmOsLI0ASdmQwKZglNk92H7ZwsbWKSdRBagjeIGQ5JbxHclsrG3SICL
BngdkOx8ny0IQo/LTAy5QEflOBk1JthqDWeZF7xuis3iuuVF+bh1kapXDX1tU1uL
h2UEmCPGQXxbpihUCpPWUTqNpzFmiBomu59s8CW+lzQs7Kc8MK0jrQ7Dw2Q5WB1I
qP5LaVRmutj2/hoDu0Mauv/6ALaUIPbMLWIQc2rCI6Y4PH+3Z8oI5D58fqhSIcdW
MfwJXo9nPChujEm9soFVzz/XkIdU+2G8TqpPbhy4tdRxc8duZpqFfhIF8yMceJYT
MsYBhg3Ifw6ObHQp0DOEWzNKRKnC42n6hZUhsNNZ+TAKtaqA3u8SzrQ01PbS9BRQ
9sLZsFIaFVu2lelMxzYR592LCkbFWmg/fXZap3vr1KNQU1+hZ1lR49we50We3STz
6K94cJTNArF9vhe30PRtMHGYbjyrXGT/yuQ2dix7oxKqzywPTpTwv1Dy3hFT2fcD
a1NSpHo5SnyHBk7/hsvovYCxt6d9fF9HntjyeRcVwgFtiSpnp/Fy3MHUwtY/aQnS
uAEK6ce9JoSzJa3aPzvyqyl2TiJpxHsCXwcw19eJPbibeLpUwVbAYdNDLoyBtc94
/IsW+aTjgM+IbVYjFUcOUpUyY0F6LnQp3ZiIAos5GvedCdAX3oQpQzCIwFxv9fAL
RztW9CRHp84hOwqPRzJsqw0ppYOos/+dodH5NhowLNSJyGOpfUQGa+nF+hgxgy+f
LX76qNbXyF3+frFh71c259UY7rrrBe2NuUUUnZ0WHc1ZrAXpwQPC/wg=
=Qmm3
-----END PGP MESSAGE-----

** General Settings
   Just prepend 'Fwd:' to subject while forwarding

   #+BEGIN_SRC emacs-lisp
     (setq message-make-forward-subject-function 'message-forward-subject-fwd)
   #+END_SRC

   Put signature before forwarded message.

   #+BEGIN_SRC emacs-lisp
     (setq message-forward-before-signature nil)
   #+END_SRC

   #+BEGIN_COMMENT

   Sign messages by default.

   #+BEGIN_SRC emacs-lisp
   ;;(add-hook 'message-setup-hook 'mml-secure-message-sign)
   #+END_SRC

   #+END_COMMENT

   Kill buffer after sending the message.

   #+BEGIN_SRC emacs-lisp
     (setq message-kill-buffer-on-exit t)
   #+END_SRC

** Msmtp

   Use msmtp for sending mails.

   #+BEGIN_SRC emacs-lisp
     (setq sendmail-program "/usr/bin/msmtp")
     (setq message-send-mail-function 'message-send-mail-with-sendmail)
     (setq message-fill-column nil)
     (setq mail-specify-envelope-from t
           ;; needed for debians message.el cf. README.Debian.gz
           message-sendmail-f-is-evil nil
           mail-envelope-from 'header
           message-sendmail-envelope-from 'header)
   #+END_SRC
 
** Flyspell

   Use flyspell for spell checking.

   #+BEGIN_SRC emacs-lisp
     (defun fvaresi/setup-message-mode ()
       (flyspell-mode t))

     (add-hook 'message-mode-hook 'fvaresi/setup-message-mode)
   #+END_SRC

** Gnus-alias

   Use gnus-alias for having multiple identities.

   #+BEGIN_SRC emacs-lisp
     (require 'gnus-alias)
     (setq gnus-alias-identity-alist
   	'(("personal"
   	   nil
              "Fernando Varesi <fvaresi@gmail.com>"
              nil
              nil
              nil
              "~/.signature")
             ("infuy"
              nil
              "Fernando Varesi <fernando@infuy.com>"
              "Infuy"
              nil
              nil
              nil)
             ("internetbrands"
              nil
              "Fernando Varesi <fernando.varesi@vbulletin.com>"
              "Internet Brands (Autocomm)"
              nil
              nil
              nil)))
     (setq gnus-alias-default-identity "personal")
     (setq gnus-alias-identity-rules
   	'(("internetbrands" ("any" "internetbrands\.com" both) "internetbrands")
             ("vbulletin" ("any" "vbulletin\.com" both) "internetbrands")
             ("infuy" ("any" "infuy\.com" both) "infuy")))

     (defun my-message-load-hook ()
       (gnus-alias-init))

     (add-hook 'message-load-hook 'my-message-load-hook)
     (add-hook 'message-setup-hook 'gnus-alias-determine-identity)
   #+END_SRC

** Address completion

   #+BEGIN_COMMENT
   #+BEGIN_SRC emacs-lisp
     (require 'notmuch-address)
     (setq notmuch-address-command "/home/fvaresi/bin/goobook-notmuch")
     (notmuch-address-message-insinuate)
   #+END_SRC
   #+END_COMMENT

   Using [[https://julien.danjou.info/projects/emacs-packages#google-contacts][google-contacts]] for address completion.

   #+BEGIN_SRC emacs-lisp
     (require 'google-contacts)
     (require 'google-contacts-message)
   #+END_SRC

** Notmuch

   Notmuch takes care of email indexing and searching.

   Most tips were obtained [[https://notmuchmail.org/emacstips/][here]].

   #+BEGIN_SRC emacs-lisp
     (require 'notmuch)

     (setq notmuch-always-prompt-for-sender t)
     (setq notmuch-crypto-process-mime t)
     (setq notmuch-search-oldest-first nil)
   #+END_SRC

   #+BEGIN_COMMENT
   
   This gives preference to text/html over text/plain.

   #+BEGIN_SRC emacs-lisp
     (setq notmuch-multipart/alternative-discouraged '("text/plain" "text/html"))
   #+END_SRC

   #+END_COMMENT

   Create some keybindings for toggling frequently used tags.

   #+BEGIN_SRC emacs-lisp
     (defun fvaresi/notmuch-mode ()
       (interactive)

       (let* ((str-major-mode (format "%s" major-mode)))
         (if (string-match "notmuch-\\(.*\\)-mode" str-major-mode)
                                       (match-string 1 str-major-mode))))

     (defun fvaresi/notmuch-tag (keybinding tag-name tag-all)
       (let* ((remove-tag (concat "-" tag-name))
              (add-tag (concat "+" tag-name)))

         (define-key
           notmuch-common-keymap
           keybinding
           `(lambda ()
              (interactive)

              (let* ((notmuch-mode (fvaresi/notmuch-mode))
                     (base-tag-cmd (concat "notmuch-" notmuch-mode "-tag"))
                     (tag-cmd ,(if tag-all
                                   `(concat base-tag-cmd "-all")
                                 `base-tag-cmd))
                     (get-tags-cmd (concat "notmuch-" notmuch-mode "-get-tags")))

                (funcall (intern tag-cmd)
                         (list (if (member ,tag-name (funcall (intern get-tags-cmd))) ,remove-tag ,add-tag))))))))

     (defun fvaresi/notmuch-tag-message (keybinding tag-name)
       (interactive)

       (fvaresi/notmuch-tag (downcase keybinding) tag-name nil))

     (defun fvaresi/notmuch-tag-all (keybinding tag-name)
       (interactive)

       (fvaresi/notmuch-tag (upcase keybinding) tag-name t))

     (setq notmuch-keybindings
           (list (cons "d" "deleted")
                 (cons "y" "inbox")
                 (cons "u" "unread")))

     (dolist (i notmuch-keybindings)
       (let* ((keybinding (car i))
              (tag-name (cdr i)))

         (fvaresi/notmuch-tag-message keybinding tag-name)
         (fvaresi/notmuch-tag-all keybinding tag-name)))

     (fvaresi/notmuch-tag "F" "flagged" nil)
   #+END_SRC

   Quick jump to a specific tag.

   #+BEGIN_SRC emacs-lisp
     (defun notmuch-jump-to-tag ()
       (interactive)
       (let ((selected-tag (helm :sources `((name . "Tags")
                                            (candidates . ,(notmuch-tag-completions))
                                            (pattern-transformer . (lambda (pattern) (regexp-quote pattern)))
                                            (action . identity))
                                 :buffer "*email tags*"
                                 :keymap helm-buffer-map)))
         (notmuch-search (concat "tag:" selected-tag))))

     (define-key notmuch-search-mode-map "T" 'notmuch-jump-to-tag)
   #+END_SRC

** Email perspective

   Quickly switch to email perspective.

   #+BEGIN_SRC emacs-lisp
     (defun notmuch-search-unread ()
       (interactive)
       (notmuch-search "tag:inbox"))

     (defun switch-to-mail-persp ()
       (interactive)
       (persp-switch "mail")
       (notmuch-search-unread))

     (define-key global-map (kbd "C-x x m") 'switch-to-mail-persp)
   #+END_SRC
